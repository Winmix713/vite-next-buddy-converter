
import { ConversionOptions } from "@/types/conversion";

export interface DiagnosticCategory {
  id: string;
  name: string;
  description: string;
  severity: 'error' | 'warning' | 'info';
}

export interface Diagnostic {
  id: string;
  category: string;
  message: string;
  details?: string;
  file?: string;
  line?: number;
  column?: number;
  code?: string;
  suggestion?: string;
  timestamp: number;
  severity: 'error' | 'warning' | 'info';
  context?: Record<string, any>;
}

export interface DiagnosticStatistics {
  totalErrors: number;
  totalWarnings: number;
  totalInfos: number;
  categoryCounts: Record<string, number>;
  fileErrors: Record<string, number>;
  dependenciesWithIssues: string[];
  mostCommonErrors: { message: string; count: number }[];
  conversionRate: number;
  completedSteps: string[];
}

export interface DiagnosticReport {
  project: string;
  timestamp: number;
  statistics: DiagnosticStatistics;
  diagnostics: Diagnostic[];
  conversionOptions: ConversionOptions;
}

// Diagnosztikai kateg√≥ri√°k
const diagnosticCategories: DiagnosticCategory[] = [
  {
    id: 'routing',
    name: '√ötvonalak',
    description: 'Next.js √∫tvonalakkal kapcsolatos probl√©m√°k √©s √°talak√≠t√°sok.',
    severity: 'warning'
  },
  {
    id: 'component',
    name: 'Komponensek',
    description: 'Next.js specifikus komponensek √°talak√≠t√°sa React komponensekre.',
    severity: 'warning'
  },
  {
    id: 'api',
    name: 'API √∫tvonalak',
    description: 'API √∫tvonalak √°talak√≠t√°s√°val kapcsolatos probl√©m√°k.',
    severity: 'error'
  },
  {
    id: 'data-fetching',
    name: 'Adatlek√©r√©s',
    description: 'getServerSideProps, getStaticProps √©s m√°s adatlek√©r√©si met√≥dusok √°talak√≠t√°sa.',
    severity: 'warning'
  },
  {
    id: 'typescript',
    name: 'TypeScript',
    description: 'TypeScript t√≠pusok √©s interf√©szek √°talak√≠t√°sa.',
    severity: 'warning'
  },
  {
    id: 'dependency',
    name: 'F√ºgg≈ës√©gek',
    description: 'Next.js specifikus f√ºgg≈ës√©gek kezel√©se √©s √°talak√≠t√°sa.',
    severity: 'error'
  },
  {
    id: 'config',
    name: 'Konfigur√°ci√≥',
    description: 'Next.js konfigur√°ci√≥s f√°jlok √°talak√≠t√°sa Vite konfigur√°ci√≥kra.',
    severity: 'warning'
  },
  {
    id: 'middleware',
    name: 'Middleware',
    description: 'Next.js middleware √°talak√≠t√°sa.',
    severity: 'error'
  },
  {
    id: 'optimization',
    name: 'Optimaliz√°ci√≥',
    description: 'Teljes√≠tm√©nyoptimaliz√°ci√≥s javaslatok.',
    severity: 'info'
  }
];

export class DiagnosticsReporter {
  private project: string;
  private diagnostics: Diagnostic[] = [];
  private conversionOptions: ConversionOptions;
  private completedSteps: Set<string> = new Set();
  private interactiveMode: boolean = false;
  
  constructor(project: string, options: ConversionOptions) {
    this.project = project;
    this.conversionOptions = options;
  }
  
  /**
   * Interakt√≠v m√≥d be√°ll√≠t√°sa
   */
  setInteractiveMode(interactive: boolean): void {
    this.interactiveMode = interactive;
  }
  
  /**
   * Diagnosztikai bejegyz√©s hozz√°ad√°sa
   */
  addDiagnostic(diagnostic: Omit<Diagnostic, 'id' | 'timestamp'>): void {
    const id = `${diagnostic.category}-${Date.now()}-${this.diagnostics.length}`;
    
    this.diagnostics.push({
      ...diagnostic,
      id,
      timestamp: Date.now()
    });
    
    if (this.interactiveMode) {
      // Interakt√≠v m√≥dban azonnal ki√≠rjuk a diagnosztik√°kat
      const severitySymbol = {
        error: '‚ùå',
        warning: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è'
      }[diagnostic.severity];
      
      console.log(`${severitySymbol} [${diagnostic.category}] ${diagnostic.message}`);
      if (diagnostic.file) {
        console.log(`   üìÑ ${diagnostic.file}${diagnostic.line ? `:${diagnostic.line}` : ''}`);
      }
      if (diagnostic.suggestion) {
        console.log(`   üí° ${diagnostic.suggestion}`);
      }
    }
  }
  
  /**
   * T√∂bb diagnosztikai bejegyz√©s hozz√°ad√°sa
   */
  addDiagnostics(diagnostics: Omit<Diagnostic, 'id' | 'timestamp'>[]): void {
    diagnostics.forEach(diagnostic => this.addDiagnostic(diagnostic));
  }
  
  /**
   * Hiba hozz√°ad√°sa
   */
  addError(category: string, message: string, details?: Partial<Omit<Diagnostic, 'id' | 'timestamp' | 'category' | 'message' | 'severity'>>): void {
    this.addDiagnostic({
      category,
      message,
      ...details,
      severity: 'error'
    });
  }
  
  /**
   * Figyelmeztet√©s hozz√°ad√°sa
   */
  addWarning(category: string, message: string, details?: Partial<Omit<Diagnostic, 'id' | 'timestamp' | 'category' | 'message' | 'severity'>>): void {
    this.addDiagnostic({
      category,
      message,
      ...details,
      severity: 'warning'
    });
  }
  
  /**
   * Inform√°ci√≥s bejegyz√©s hozz√°ad√°sa
   */
  addInfo(category: string, message: string, details?: Partial<Omit<Diagnostic, 'id' | 'timestamp' | 'category' | 'message' | 'severity'>>): void {
    this.addDiagnostic({
      category,
      message,
      ...details,
      severity: 'info'
    });
  }
  
  /**
   * Folyamat l√©p√©s befejez√©s√©nek jelz√©se
   */
  completeStep(step: string): void {
    this.completedSteps.add(step);
    this.addInfo('progress', `${step} l√©p√©s befejezve.`);
  }
  
  /**
   * Diagnosztik√°k lek√©rdez√©se
   */
  getDiagnostics(): Diagnostic[] {
    return this.diagnostics;
  }
  
  /**
   * Diagnosztikai statisztik√°k gener√°l√°sa
   */
  generateStatistics(): DiagnosticStatistics {
    // K√ºl√∂nb√∂z≈ë s√∫lyoss√°g√∫ diagnosztik√°k sz√°mol√°sa
    const totalErrors = this.diagnostics.filter(d => d.severity === 'error').length;
    const totalWarnings = this.diagnostics.filter(d => d.severity === 'warning').length;
    const totalInfos = this.diagnostics.filter(d => d.severity === 'info').length;
    
    // Kateg√≥ri√°k sz√°mol√°sa
    const categoryCounts: Record<string, number> = {};
    this.diagnostics.forEach(d => {
      categoryCounts[d.category] = (categoryCounts[d.category] || 0) + 1;
    });
    
    // F√°jlonk√©nti hib√°k sz√°mol√°sa
    const fileErrors: Record<string, number> = {};
    this.diagnostics.filter(d => d.file && d.severity === 'error').forEach(d => {
      if (d.file) {
        fileErrors[d.file] = (fileErrors[d.file] || 0) + 1;
      }
    });
    
    // Probl√©m√°s f√ºgg≈ës√©gek
    const dependenciesWithIssues = Array.from(new Set(
      this.diagnostics
        .filter(d => d.category === 'dependency' && d.context?.package)
        .map(d => d.context?.package as string)
    ));
    
    // Leggyakoribb hib√°k
    const errorMessages = this.diagnostics.filter(d => d.severity === 'error').map(d => d.message);
    const errorCounts: Record<string, number> = {};
    errorMessages.forEach(message => {
      errorCounts[message] = (errorCounts[message] || 0) + 1;
    });
    
    const mostCommonErrors = Object.entries(errorCounts)
      .map(([message, count]) => ({ message, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 5);
    
    // Konverzi√≥s ar√°ny (befejezett l√©p√©sek / √∂sszes l√©p√©s)
    const totalSteps = Object.values(this.conversionOptions).filter(v => v === true).length;
    const completedStepsCount = this.completedSteps.size;
    const conversionRate = totalSteps > 0 ? completedStepsCount / totalSteps : 0;
    
    return {
      totalErrors,
      totalWarnings,
      totalInfos,
      categoryCounts,
      fileErrors,
      dependenciesWithIssues,
      mostCommonErrors,
      conversionRate,
      completedSteps: Array.from(this.completedSteps)
    };
  }
  
  /**
   * Diagnosztikai jelent√©s gener√°l√°sa
   */
  generateReport(): DiagnosticReport {
    return {
      project: this.project,
      timestamp: Date.now(),
      statistics: this.generateStatistics(),
      diagnostics: this.diagnostics,
      conversionOptions: this.conversionOptions
    };
  }
  
  /**
   * Markdown form√°tum√∫ jelent√©s gener√°l√°sa
   */
  generateMarkdownReport(): string {
    const stats = this.generateStatistics();
    const report = this.generateReport();
    
    return `# Next.js - Vite konverzi√≥s jelent√©s

## Projekt: ${this.project}
D√°tum: ${new Date(report.timestamp).toLocaleDateString('hu-HU')}

## √ñsszefoglal√≥
- **Hib√°k**: ${stats.totalErrors}
- **Figyelmeztet√©sek**: ${stats.totalWarnings}
- **Inform√°ci√≥k**: ${stats.totalInfos}
- **Konverzi√≥s ar√°ny**: ${(stats.conversionRate * 100).toFixed(1)}%

## Befejezett l√©p√©sek
${stats.completedSteps.map(step => `- ‚úÖ ${step}`).join('\n')}

## Probl√©m√°s ter√ºletek
${Object.entries(stats.categoryCounts)
  .sort((a, b) => b[1] - a[1])
  .map(([category, count]) => {
    const categoryInfo = diagnosticCategories.find(c => c.id === category);
    return `- **${categoryInfo?.name || category}**: ${count} probl√©ma`;
  })
  .join('\n')}

## Legprobl√©m√°sabb f√°jlok
${Object.entries(stats.fileErrors)
  .sort((a, b) => b[1] - a[1])
  .slice(0, 5)
  .map(([file, count]) => `- ${file}: ${count} hiba`)
  .join('\n') || '- Nincsenek f√°jl-specifikus hib√°k'}

## Probl√©m√°s f√ºgg≈ës√©gek
${stats.dependenciesWithIssues.map(dep => `- ${dep}`).join('\n') || '- Nincsenek probl√©m√°s f√ºgg≈ës√©gek'}

## Leggyakoribb hib√°k
${stats.mostCommonErrors.map(error => `- ${error.message} (${error.count}x)`).join('\n') || '- Nincsenek ism√©tl≈ëd≈ë hib√°k'}

## R√©szletes diagnosztik√°k

${this.generateDetailedDiagnosticsMarkdown()}

## Javaslatok

${this.generateSuggestionsMarkdown()}

## K√∂vetkez≈ë l√©p√©sek

1. Ellen≈ërizd a kritikus hib√°kat a fenti list√°ban
2. Tekintsd √°t a f√ºgg≈ës√©gi probl√©m√°kat
3. Futtasd az alkalmaz√°st fejleszt≈ëi m√≥dban a runtime hib√°k felder√≠t√©s√©hez
4. V√©gezz teljes√≠tm√©nym√©r√©st a konvert√°lt alkalmaz√°son
`;
  }
  
  /**
   * R√©szletes diagnosztik√°k Markdown form√°tumban
   */
  private generateDetailedDiagnosticsMarkdown(): string {
    const severitySymbols = {
      error: '‚ùå',
      warning: '‚ö†Ô∏è',
      info: '‚ÑπÔ∏è'
    };
    
    // Kateg√≥ri√°k szerinti csoportos√≠t√°s
    const groupedDiagnostics = this.diagnostics.reduce((groups: Record<string, Diagnostic[]>, diagnostic) => {
      if (!groups[diagnostic.category]) {
        groups[diagnostic.category] = [];
      }
      groups[diagnostic.category].push(diagnostic);
      return groups;
    }, {});
    
    // Kateg√≥ri√°k nevei
    const categoryNames = diagnosticCategories.reduce((names: Record<string, string>, category) => {
      names[category.id] = category.name;
      return names;
    }, {});
    
    // Kateg√≥ri√°nk√©nt diagnosztik√°k megjelen√≠t√©se
    return Object.entries(groupedDiagnostics)
      .map(([category, diagnostics]) => {
        const categoryName = categoryNames[category] || category;
        
        return `### ${categoryName}

${diagnostics.map(d => {
  let markdown = `#### ${severitySymbols[d.severity]} ${d.message}\n`;
  
  if (d.details) {
    markdown += `\n${d.details}\n`;
  }
  
  if (d.file) {
    markdown += `\n**F√°jl:** \`${d.file}${d.line ? `:${d.line}${d.column ? `:${d.column}` : ''}` : ''}\`\n`;
  }
  
  if (d.code) {
    markdown += `\n\`\`\`typescript\n${d.code}\n\`\`\`\n`;
  }
  
  if (d.suggestion) {
    markdown += `\n**Javaslat:** ${d.suggestion}\n`;
  }
  
  return markdown;
}).join('\n')}`;
      })
      .join('\n\n');
  }
  
  /**
   * Javaslatok gener√°l√°sa Markdown form√°tumban
   */
  private generateSuggestionsMarkdown(): string {
    // Hib√°k √©s figyelmeztet√©sek alapj√°n javaslatokat gener√°lunk
    const suggestions: string[] = [];
    
    // F√ºgg≈ës√©gi probl√©m√°k eset√©n
    if (this.diagnostics.some(d => d.category === 'dependency' && d.severity === 'error')) {
      suggestions.push('**F√ºgg≈ës√©gek friss√≠t√©se:**\n' + 
        '- Friss√≠tsd a projekt f√ºgg≈ës√©geit a Vite-kompatibilis verzi√≥kra\n' +
        '- T√°vol√≠tsd el a Next.js-specifikus f√ºgg≈ës√©geket, amelyek nem kompatibilisek\n' +
        '- Fontold meg a npm helyett a pnpm vagy yarn haszn√°lat√°t a f√ºgg≈ës√©gek kezel√©s√©hez');
    }
    
    // API √∫tvonalakkal kapcsolatos probl√©m√°k
    if (this.diagnostics.some(d => d.category === 'api' && d.severity === 'error')) {
      suggestions.push('**API √∫tvonalak kezel√©se:**\n' +
        '- Hozz l√©tre egy k√ºl√∂n√°ll√≥ Express/Fastify szervert az API √∫tvonalakhoz\n' +
        '- Fontold meg a serverless f√ºggv√©nyek haszn√°lat√°t (pl. Netlify Functions, Vercel Functions) az API √∫tvonalakhoz\n' +
        '- Helyezd √°t az API logik√°t egy k√ºl√∂n√°ll√≥ backend projektbe');
    }
    
    // Middleware-rel kapcsolatos probl√©m√°k
    if (this.diagnostics.some(d => d.category === 'middleware' && d.severity !== 'info')) {
      suggestions.push('**Middleware-ek kezel√©se:**\n' +
        '- Alak√≠tsd √°t a Next.js middleware-eket Express middleware-ekk√© egy k√ºl√∂n√°ll√≥ szerveren\n' +
        '- Ahol lehets√©ges, alak√≠tsd √°t a middleware logik√°t React hook-k√°\n' +
        '- Fontold meg Auth.js/Next-Auth haszn√°lat√°t hiteles√≠t√©shez Vite k√∂rnyezetben');
    }
    
    // Adatlek√©r√©si met√≥dusokkal kapcsolatos probl√©m√°k
    if (this.diagnostics.some(d => d.category === 'data-fetching' && d.severity !== 'info')) {
      suggestions.push('**Adatlek√©r√©s √°talak√≠t√°sa:**\n' +
        '- Haszn√°lj React Query vagy SWR k√∂nyvt√°rakat a szerveroldali adatok kezel√©s√©hez\n' +
        '- Alak√≠tsd √°t a getServerSideProps √©s getStaticProps f√ºggv√©nyeket custom hook-okk√°\n' +
        '- Haszn√°ld a React Router loader funkci√≥it a route-szint≈± adatlek√©r√©shez');
    }
    
    // Ha nincs el√©g javaslat, adjunk √°ltal√°nos javaslatokat
    if (suggestions.length < 3) {
      suggestions.push('**√Åltal√°nos optimaliz√°ci√≥k:**\n' +
        '- Haszn√°lj ESBuild vagy SWC ford√≠t√≥t a TypeScript ford√≠t√°s gyors√≠t√°s√°hoz Vite k√∂rnyezetben\n' +
        '- Alkalmazz code splitting-et √©s lazy loading-ot a bundle m√©ret cs√∂kkent√©s√©hez\n' +
        '- Fontold meg a React komponensek √∫jrafelhaszn√°lhat√≥s√°g√°nak n√∂vel√©s√©t a komponensk√∂nyvt√°r kialak√≠t√°s√°val');
    }
    
    return suggestions.join('\n\n');
  }
  
  /**
   * HTML form√°tum√∫ jelent√©s gener√°l√°sa
   */
  generateHtmlReport(): string {
    // Egyszer≈±s√≠tett HTML konverzi√≥ a Markdown jelent√©sb≈ël
    const markdown = this.generateMarkdownReport();
    
    // Nagyon egyszer≈± Markdown-to-HTML √°talak√≠t√°s
    const html = markdown
      .replace(/^# (.+)$/gm, '<h1>$1</h1>')
      .replace(/^## (.+)$/gm, '<h2>$1</h2>')
      .replace(/^### (.+)$/gm, '<h3>$1</h3>')
      .replace(/^#### (.+)$/gm, '<h4>$1</h4>')
      .replace(/^- (.+)$/gm, '<li>$1</li>')
      .replace(/\n\n/g, '</p><p>')
      .replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>')
      .replace(/\`\`\`([^`]+)\`\`\`/g, '<pre><code>$1</code></pre>')
      .replace(/\`([^`]+)\`/g, '<code>$1</code>');
    
    return `<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Next.js - Vite konverzi√≥s jelent√©s</title>
  <style>
    body { font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
    h1, h2 { border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; }
    code { background-color: #f6f8fa; padding: 0.2em 0.4em; border-radius: 3px; }
    pre { background-color: #f6f8fa; padding: 16px; border-radius: 3px; overflow: auto; }
    pre code { background-color: transparent; padding: 0; }
    li { margin: 0.25em 0; }
  </style>
</head>
<body>
  <p>${html}</p>
</body>
</html>`;
  }
  
  /**
   * Diagnosztikai eredm√©nyek export√°l√°sa JSON form√°tumban
   */
  exportJSON(): string {
    return JSON.stringify(this.generateReport(), null, 2);
  }
  
  /**
   * Interakt√≠v hibajav√≠t√≥ javaslatok gener√°l√°sa
   */
  generateFixSuggestions(diagnostic: Diagnostic): string[] {
    // Kateg√≥ria alapj√°n gener√°lunk javaslatokat
    switch (diagnostic.category) {
      case 'routing':
        return this.generateRoutingFixSuggestions(diagnostic);
      case 'component':
        return this.generateComponentFixSuggestions(diagnostic);
      case 'api':
        return this.generateApiFixSuggestions(diagnostic);
      case 'data-fetching':
        return this.generateDataFetchingFixSuggestions(diagnostic);
      case 'typescript':
        return this.generateTypescriptFixSuggestions(diagnostic);
      case 'dependency':
        return this.generateDependencyFixSuggestions(diagnostic);
      default:
        return [
          diagnostic.suggestion || 'Nincsenek automatikus jav√≠t√°si javaslatok ehhez a probl√©m√°hoz.'
        ];
    }
  }
  
  /**
   * √ötvonalak jav√≠t√°si javaslatai
   */
  private generateRoutingFixSuggestions(diagnostic: Diagnostic): string[] {
    const suggestions: string[] = [];
    
    // Dinamikus √∫tvonal kezel√©se
    if (diagnostic.message.includes('dynamic route')) {
      suggestions.push('Haszn√°ld a `useParams` hook-ot a React Router-b≈ël a dinamikus param√©terek el√©r√©s√©hez.');
      suggestions.push('Alak√≠tsd √°t a f√°jl alap√∫ √∫tvonalat React Router route defin√≠ci√≥v√°.');
    }
    
    // Catch-all √∫tvonalak kezel√©se
    else if (diagnostic.message.includes('catch-all')) {
      suggestions.push('Haszn√°ld a `*` (wildcard) √∫tvonal-param√©tert a React Router-ben a catch-all √∫tvonalakhoz.');
      suggestions.push('Haszn√°ld a `useParams` hook-ot a param√©terek t√∂mbk√©nt val√≥ el√©r√©s√©hez.');
    }
    
    // Opcion√°lis √∫tvonalak kezel√©se
    else if (diagnostic.message.includes('optional')) {
      suggestions.push('Haszn√°lj k√©t k√ºl√∂nb√∂z≈ë √∫tvonal defin√≠ci√≥t az opcion√°lis param√©ter kezel√©s√©hez.');
    }
    
    if (suggestions.length === 0) {
      suggestions.push(diagnostic.suggestion || 'Nincsenek specifikus javaslatok ehhez a probl√©m√°hoz.');
    }
    
    return suggestions;
  }
  
  /**
   * Komponensek jav√≠t√°si javaslatai
   */
  private generateComponentFixSuggestions(diagnostic: Diagnostic): string[] {
    const suggestions: string[] = [];
    
    // Image komponens √°talak√≠t√°sa
    if (diagnostic.message.includes('Image')) {
      suggestions.push('Haszn√°ld az @unpic/react Image komponens√©t, vagy standard img elemet m√©ret attrib√∫tumokkal.');
    }
    // Link komponens √°talak√≠t√°sa
    else if (diagnostic.message.includes('Link')) {
      suggestions.push('Haszn√°ld a React Router Link komponens√©t, √©s alak√≠tsd √°t a "href" attrib√∫tumokat "to" attrib√∫tumokk√°.');
    }
    // Head komponens √°talak√≠t√°sa
    else if (diagnostic.message.includes('Head')) {
      suggestions.push('Haszn√°ld a react-helmet-async Helmet komponens√©t a dokumentum fejl√©c m√≥dos√≠t√°s√°hoz.');
    }
    // Script komponens √°talak√≠t√°sa
    else if (diagnostic.message.includes('Script')) {
      suggestions.push('Haszn√°lj standard script elemeket, vagy import√°ld k√∂zvetlen√ºl a szkriptf√°jlokat.');
    }
    
    if (suggestions.length === 0) {
      suggestions.push(diagnostic.suggestion || 'Nincsenek specifikus javaslatok ehhez a probl√©m√°hoz.');
    }
    
    return suggestions;
  }
  
  /**
   * API √∫tvonalak jav√≠t√°si javaslatai
   */
  private generateApiFixSuggestions(diagnostic: Diagnostic): string[] {
    const suggestions: string[] = [];
    
    suggestions.push('Hozz l√©tre egy k√ºl√∂n√°ll√≥ Express/Fastify szervert az API kezel√©s√©hez.');
    suggestions.push('Alak√≠tsd √°t a NextApiRequest √©s NextApiResponse t√≠pusokat Express Request √©s Response t√≠pusokk√°.');
    
    if (diagnostic.message.includes('dynamic')) {
      suggestions.push('Haszn√°ld az Express √∫tvonal-param√©tereit a dinamikus API √∫tvonalakhoz: `/api/user/:id`.');
    }
    
    return suggestions;
  }
  
  /**
   * Adatlek√©r√©si met√≥dusok jav√≠t√°si javaslatai
   */
  private generateDataFetchingFixSuggestions(diagnostic: Diagnostic): string[] {
    const suggestions: string[] = [];
    
    if (diagnostic.message.includes('getServerSideProps')) {
      suggestions.push('Haszn√°lj React Query `useQuery` hook-ot a szerveroldali adatlek√©r√©s helyett.');
      suggestions.push('Alak√≠tsd √°t a getServerSideProps f√ºggv√©ny logik√°j√°t egy async f√ºggv√©nny√© a fetchQueryFn-hez.');
    }
    else if (diagnostic.message.includes('getStaticProps')) {
      suggestions.push('Haszn√°lj React Query-t inicializ√°ci√≥s adatokkal vagy egy glob√°lis state menedzsment eszk√∂zt.');
    }
    else if (diagnostic.message.includes('getStaticPaths')) {
      suggestions.push('Defini√°lj explicit route-okat a statikus el√©r√©si utak helyett.');
    }
    
    return suggestions;
  }
  
  /**
   * TypeScript t√≠pusok jav√≠t√°si javaslatai
   */
  private generateTypescriptFixSuggestions(diagnostic: Diagnostic): string[] {
    const suggestions: string[] = [];
    
    if (diagnostic.message.includes('NextPage')) {
      suggestions.push('Haszn√°ld a React.FC<Props> t√≠pust a NextPage<Props> helyett.');
    }
    else if (diagnostic.message.includes('GetServerSideProps')) {
      suggestions.push('Haszn√°ld a UseQueryResult<T> t√≠pust a React Query-b≈ël.');
    }
    else if (diagnostic.message.includes('NextApiRequest') || diagnostic.message.includes('NextApiResponse')) {
      suggestions.push('Haszn√°ld az Express Request √©s Response t√≠pusokat.');
    }
    
    return suggestions;
  }
  
  /**
   * F√ºgg≈ës√©gek jav√≠t√°si javaslatai
   */
  private generateDependencyFixSuggestions(diagnostic: Diagnostic): string[] {
    const suggestions: string[] = [];
    const packageName = diagnostic.context?.package as string;
    
    if (packageName?.startsWith('next')) {
      suggestions.push(`T√°vol√≠tsd el a '${packageName}' f√ºgg≈ës√©get, mert nem kompatibilis a Vite k√∂rnyezettel.`);
      
      // Helyettes√≠t≈ë csomagok javasl√°sa
      if (packageName === 'next') {
        suggestions.push('Helyettes√≠tsd a Next.js-t React √©s Vite kombin√°ci√≥j√°val.');
      }
      else if (packageName === 'next/image') {
        suggestions.push('Haszn√°ld az @unpic/react csomagot a k√©poptimaliz√°l√°shoz.');
      }
      else if (packageName === 'next/link') {
        suggestions.push('Haszn√°ld a react-router-dom csomagot az √∫tvonal-navig√°ci√≥hoz.');
      }
      else if (packageName === 'next/head') {
        suggestions.push('Haszn√°ld a react-helmet-async csomagot a dokumentum fejl√©c kezel√©s√©hez.');
      }
      else if (packageName === 'next/router') {
        suggestions.push('Haszn√°ld a react-router-dom csomagot az √∫tvonal-kezel√©shez.');
      }
    } else {
      suggestions.push(`Ellen≈ërizd a '${packageName}' verzi√≥sz√°m√°t a Vite kompatibilit√°shoz.`);
    }
    
    return suggestions;
  }
}

// P√©lda haszn√°latra:
/*
const reporter = new DiagnosticsReporter('MyProject', { 
  useReactRouter: true, 
  convertApiRoutes: true,
  transformDataFetching: true,
  replaceComponents: true,
  updateDependencies: true,
  preserveTypeScript: true,
  handleMiddleware: true
});

reporter.addError('routing', 'Dynamic route conversion failed', { 
  file: 'pages/[id].tsx',
  line: 10,
  suggestion: 'Use React Router useParams hook'
});

reporter.addWarning('component', 'Image component requires manual attention', {
  file: 'components/Banner.tsx'
});

reporter.completeStep('Routing analysis');
reporter.completeStep('Component transformation');

const report = reporter.generateMarkdownReport();
console.log(report);
*/

/**
 * Interakt√≠v hibajav√≠t√°st seg√≠t≈ë oszt√°ly
 */
export class DiagnosticsFixHelper {
  private reporter: DiagnosticsReporter;
  
  constructor(reporter: DiagnosticsReporter) {
    this.reporter = reporter;
  }
  
  /**
   * Hibajav√≠t√°si javaslatok k√©r√©se
   */
  getFixSuggestions(diagnosticId: string): string[] {
    const diagnostic = this.reporter.getDiagnostics().find(d => d.id === diagnosticId);
    if (!diagnostic) {
      return ['A megadott azonos√≠t√≥j√∫ diagnosztika nem tal√°lhat√≥.'];
    }
    
    return this.reporter.generateFixSuggestions(diagnostic);
  }
  
  /**
   * Automatikus jav√≠t√°s alkalmaz√°sa
   */
  applyAutoFix(diagnosticId: string, fixIndex: number = 0): { success: boolean; result?: string; message?: string } {
    const diagnostic = this.reporter.getDiagnostics().find(d => d.id === diagnosticId);
    if (!diagnostic) {
      return { success: false, message: 'A megadott azonos√≠t√≥j√∫ diagnosztika nem tal√°lhat√≥.' };
    }
    
    // Itt val√≥s projekben a t√©nyleges jav√≠t√°s t√∂rt√©nne, p√©ld√°ul k√≥dm√≥dos√≠t√°ssal
    // Demonstr√°ci√≥s c√©lb√≥l csak visszaadunk egy √ºzenetet
    return {
      success: true,
      result: `Sikeres automatikus jav√≠t√°s: ${diagnostic.message}`,
      message: `A ${diagnostic.category} kateg√≥ri√°j√∫ diagnosztika jav√≠t√°sa megt√∂rt√©nt.`
    };
  }
  
  /**
   * Legkritikusabb hib√°k lek√©rdez√©se
   */
  getCriticalDiagnostics(limit: number = 5): Diagnostic[] {
    return this.reporter.getDiagnostics()
      .filter(d => d.severity === 'error')
      .sort((a, b) => {
        // API √©s f√ºgg≈ës√©gi hib√°k a legfontosabbak
        if (a.category === 'api' && b.category !== 'api') return -1;
        if (a.category !== 'api' && b.category === 'api') return 1;
        if (a.category === 'dependency' && b.category !== 'dependency') return -1;
        if (a.category !== 'dependency' && b.category === 'dependency') return 1;
        
        // Egy√©bk√©nt id≈ëb√©lyeg szerint rendezz√ºk
        return b.timestamp - a.timestamp;
      })
      .slice(0, limit);
  }
}
